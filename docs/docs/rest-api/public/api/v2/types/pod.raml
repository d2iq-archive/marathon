#%RAML 1.0 DataType
type: object
description: How much disk space is needed for this application. This number does not have to be an integer, but can be a fraction.
properties:
  id:
    type: !include pathId.raml
    description: Unique identifier for the pod consisting of a series of names separated by slashes. Each name must be at least 1 character and may only contain digits (`0-9`), dashes (`-`), dots (`.`), and lowercase letters (`a-z`). The name may not begin or end with a dash.
    required: true
    example: /ops/audit
  containers:
    type: array
    items: !include mesosContainer.raml
  resources:
    type: !include resources.raml
    description: The resources to allocate to the pod
  instances:
    type: integer
    description: The number of instances of this pod to start.
    minimum: 0
  maxInstances?:
    type: integer
    description:|
      The maximum number of instances of this pod that should
      be running at a given time.
    minimum: 0
  constraints?:
    type: array
    items: !include constraint.raml
    description:|
      Valid constraint operators are one of UNIQUE, CLUSTER, GROUP_BY, LIKE, UNLIKE, MAX_PER
    example: [hostname:UNIQUE]
  user?:
    type: string
    description: The user to use to run the tasks on the agent
  version?:
    type: datetime-only
    description: The version of the definition, immutable
  versionInfo?: !include versionInfo.raml
  env?:
    type: array
    items: !include environmentVariable.raml
    displayName: environment
    description:|
      Environment Variables to set at the pod level.
      Individual containers may override them
    example: |
      [ { "name" : "MASTER_URI", "value": "http://master.local" },
        { "name" : "MASTER_PASSWORD", "secret": "/master/secret1" } ]
  volumes?:
    type: array
    items: !include volumes.raml
    description: Volumes defined on a pod level that are mounted into containers
  networks?:
    type: array
    items: !include network.raml
    description:|
      Network settings are defined on a pod level. All containers
      share the same network stack. At this time, only one stack is supported.
  acceptedResourceRoles?:
    type: string[]
    example: [public-facing]
    description: |
      A list of resource roles.
      Marathon considers only resource offers with roles in this list for
      launching tasks of this app. If you do not specify this,
      Marathon considers all resource offers with roles that have been
      configured by the `--default_accepted_resource_roles` command line flag.
      If no `--default_accepted_resource_roles` was given on startup,
      Marathon considers all resource offers. To register Marathon for a role,
      you need to specify the `--mesos_role` command line flag on startup.
      If you want to assign all resources of a slave to a role,
      you can use the `--default_role` argument when starting up the slave.
      If you need a more fine-grained configuration, you can use the
      `--resources` argument to specify resource shares per role.
      See [the Mesos attribute and resources documentation](http://mesos.apache.org/documentation/latest/attributes-resources/) for details
