# ----------------------------------------------------------- #
# Configuration Fragment : Measure Marathon Queue Size        #
# ----------------------------------------------------------- #
# This fragment installs a tracker to extract the current     #
# queue size metric as a driver metric.                       #
# ----------------------------------------------------------- #

# Global test configuration
# ===========================
config:

  # Define the metrics we are measuring
  metrics:
    - name: queueSize
      uuid: 46d9f43691f142cea9baf0a6eb774dde
      desc: The number of active root group updates in marathon
      summarize:
        - class: summarize.PercentileSummarizer
          name: p50
          percentile: 50
          outliers: no
        - class: summarize.PercentileSummarizer
          name: p75
          percentile: 75
          outliers: no
        - class: summarize.PercentileSummarizer
          name: p95
          percentile: 95
          outliers: no
        - class: summarize.PercentileSummarizer
          name: p98
          percentile: 98
          outliers: no
        - class: summarize.PercentileSummarizer
          name: p99
          percentile: 99
          outliers: no
        - class: "@mean_err"
          outliers: no
        - class: "@min"
          outliers: no
        - class: "@max"
          outliers: no
      units: updates

  # Define the indicators that can summarise our values
  indicators:

    # Calculate `meanQueueSize` by calculating the normalizing average
    # of all the `queueSize` mean values, normalized against each test's
    # normalization expression
    - name: meanQueueSize
      class: indicator.NormalizedMeanMetricIndicator
      metric: queueSize.mean_err
      normalizeto: "{{normalize_to}}"

# Tracker configuration
# ===========================
trackers:

  # Extract the queueSize metric from the metric observer
  - class: tracker.DumpMetricTracker
    map:
      gauges.marathon.debug.root-group.updates.active.gauge.value: queueSize
